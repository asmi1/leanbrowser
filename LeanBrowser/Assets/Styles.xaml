<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Window -->
    <Style x:Key="windowStyle" TargetType="Window" BasedOn="{StaticResource windowBGStyle}">
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="WindowState" Value="Normal" />
        <Setter Property="BorderBrush" Value="{StaticResource darkBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="AllowsTransparency" Value="False" />
        <Setter Property="ResizeMode" Value="CanResize" />
        <Setter Property="Width" Value="1100" />
        <Setter Property="Height" Value="600" />
        <Setter Property="MinWidth" Value="400" />
        <Setter Property="MinHeight" Value="300" />
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="0" CornerRadius="0" ResizeBorderThickness="7" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="WindowChrome.WindowChrome">
                    <Setter.Value>
                        <WindowChrome CaptionHeight="0" CornerRadius="0" ResizeBorderThickness="0" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Window Chrome -->
    <Style x:Key="windowChromeStyle" TargetType="Grid" BasedOn="{StaticResource windowChromeBGStyle}">
        <Setter Property="Background" Value="{StaticResource lightBrush2}" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Height" Value="32" />
        <Setter Property="Panel.ZIndex" Value="2" />
    </Style>
    
    <!-- Window Buttons -->
    <Style x:Key="windowButtonsStyle" TargetType="Button" BasedOn="{StaticResource buttonStyle}">
        <Setter Property="Background" Value="{StaticResource transBrush}"/>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Width" Value="46" />
        <Setter Property="Height" Value="32" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource lightBtnMouseOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource lightBtnPressed}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Window Images style -->
    <Style x:Key="windowImagesStyle" TargetType="Image">
        <Setter Property="Width" Value="10" />
        <Setter Property="Height" Value="10" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!-- Window Close style -->
    <Style x:Key="windowCloseStyle" TargetType="Button" BasedOn="{StaticResource windowButtonsStyle}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource dangerBtnMouseOver}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource dangerBtnPressed}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Window Close Image style -->
    <Style x:Key="windowCloseImageStyle" TargetType="Image" BasedOn="{StaticResource windowImagesStyle}">
        <Setter Property="Source" Value="{StaticResource closeDrawingImage}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=windowClose, Path=IsMouseOver}" Value="True" >
                <Setter Property="Source" Value="{StaticResource closeDrawingImageWhite}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=windowClose, Path=IsPressed}" Value="True" >
                <Setter Property="Source" Value="{StaticResource closeDrawingImageWhite}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Window Maximize style -->
    <Style x:Key="windowMaximizeStyle" TargetType="Button" BasedOn="{StaticResource windowButtonsStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Window}, Path=WindowState}" Value="Maximized" >
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Window}, Path=WindowState}" Value="Normal" >
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Window Restore style -->
    <Style x:Key="windowRestoreStyle" TargetType="Button" BasedOn="{StaticResource windowButtonsStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Window}, Path=WindowState}" Value="Maximized" >
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Window}, Path=WindowState}" Value="Normal" >
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- TabBar control -->
    <Style x:Key="tabBarControlStyle" TargetType="UserControl">
        <Setter Property="Height" Value="32" />
    </Style>

    <!-- Tab close button -->
    <Style x:Key="tabCloseButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource transBrush}" />
        <Setter Property="Visibility" Value="Hidden" />

        <!-- Remove hover effect -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border" 
                      BorderThickness="0"
                      Padding="3"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorLevel=2,AncestorType=Grid}, Path=IsMouseOver}" Value="True" >
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Tab Favicon -->
    <Style x:Key="tabFaviconStyle" TargetType="Canvas">
        <Setter Property="Margin" Value="0,-2,4,0" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <!-- Tab Favicon border -->
    <Style x:Key="tabFaviconBorderStyle" TargetType="Border">
        <Setter Property="Padding" Value="0,4" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <!-- Tab Favicon image -->
    <Style x:Key="tabFaviconImageStyle" TargetType="Image">
        <Setter Property="Width" Value="18" />
        <Setter Property="Height" Value="18" />
    </Style>

    <!-- Tab Spinner -->
    <Style x:Key="tabFaviconSpinnerStyle" TargetType="Image" BasedOn="{StaticResource tabFaviconImageStyle}">
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <RotateTransform/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsVisible" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard RepeatBehavior="Forever">
                            <DoubleAnimationUsingKeyFrames
                            Storyboard.TargetProperty="RenderTransform.Angle">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0.05" Value="15"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0.1" Value="30"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0.15" Value="45"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0.2" Value="60"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0.25" Value="75"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0.3" Value="90"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0.35" Value="105"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0.4" Value="120"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0.45" Value="135"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:1.5" Value="150"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:1.55" Value="165"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:1.6" Value="180"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:1.65" Value="195"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:1.7" Value="210"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:1.75" Value="225"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:1.8" Value="240"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:1.85" Value="255"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:1.9" Value="270"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:1.95" Value="285"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:2.0" Value="300"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:2.05" Value="315"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:2.1" Value="330"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:2.15" Value="345"/>
                                <DiscreteDoubleKeyFrame KeyTime="0:0:2.2" Value="360"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Audio Mute image -->
    <Style x:Key="tabAudioMuteStyle" TargetType="Image">
        <Setter Property="Width" Value="14" />
        <Setter Property="Height" Value="14" />
        <Setter Property="MinWidth" Value="22" />
        <Setter Property="Margin" Value="0,0,5,0" />
        <Setter Property="Visibility" Value="Collapsed" />
    </Style>
    
    <!-- Tab title -->
    <Style x:Key="tabTitleStyle" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!-- Tab close image -->
    <Style x:Key="tabCloseImageStyle" TargetType="Image">
        <Setter Property="Source" Value="{StaticResource closeDrawingImage}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{StaticResource closeDrawingImageRed}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Tabitem -->
    <Style x:Key="tabItemStyle" TargetType="TabItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid>
                        <Border Padding="0" BorderThickness="0">
                            <ContentPresenter x:Name="ContentSite"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left"
                                ContentSource="Header" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Tab control -->
    <Style x:Key="tabControlStyle" TargetType="UserControl">
        <Setter Property="MaxWidth" Value="200" />
        <Setter Property="Width" Value="200" />
        <Setter Property="MinWidth" Value="80" />
    </Style>

    <!-- Tab -->
    <Style x:Key="tabStyle" TargetType="Border">
        <Setter Property="Height" Value="24" />
        <Setter Property="Margin" Value="1,4" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="BorderBrush" Value="{StaticResource darkBrush}" />
    </Style>

    <!-- Selected Tab Inner border -->
    <Style x:Key="selectedTabStyle" TargetType="Border" BasedOn="{StaticResource tabStyle}">
        <Setter Property="BorderBrush" Value="{StaticResource transBrush}" />
    </Style>

    <!-- Tabbar Buttons -->
    <Style x:Key="tabBarButtonStyle" TargetType="Button" BasedOn="{StaticResource buttonStyle}">
        <Setter Property="Background" Value="{StaticResource transBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Width" Value="28" />
        <Setter Property="Height" Value="28" />
    </Style>

    <!-- Tab Nav buttons visibility -->
    <Style x:Key="tabNavBtnGroupStyle" TargetType="DockPanel">
        <Setter Property="Visibility" Value="Hidden"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ComputedHorizontalScrollBarVisibility, ElementName=sv}" Value="Visible">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Tab scrollviewer -->
    <Style x:Key="tabScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,0,98,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid">
                        <ScrollContentPresenter
                            CanContentScroll="{TemplateBinding CanContentScroll}"
                            CanHorizontallyScroll="False"
                            CanVerticallyScroll="False"
                            ContentTemplate="{TemplateBinding
                            ContentTemplate}"
                            Content="{TemplateBinding Content}"
                            Margin="{TemplateBinding Padding}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding Visibility, ElementName=incognito}" Value="Visible">
                <Setter Property="Margin" Value="100,0,98,0"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Incognito -->
    <Style x:Key="tabIncognitoStyle" TargetType="StackPanel">
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="Orientation" Value="Horizontal"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Background" Value="{StaticResource darkBrush2}"/>
    </Style>

    <!-- Incognito icon -->
    <Style x:Key="tabIncognitoImageStyle" TargetType="Image">
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Margin" Value="8,0,3,2"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Incognito label -->
    <Style x:Key="tabIncognitoLabelStyle" TargetType="Label">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="{StaticResource whiteBrush}"/>
    </Style>

    <!-- Panel -->
    <Style x:Key="panelStyle" TargetType="DockPanel">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Margin" Value="4,0" />
        <Setter Property="Grid.ColumnSpan" Value="2" />
        <Setter Property="Height" Value="42" />
    </Style>

    <!-- Panel borders -->
    <Style x:Key="panelBorderStyle" TargetType="Border" BasedOn="{StaticResource panelShadowEffectStyle}">
        <Setter Property="Background" Value="{StaticResource lightBrush}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="BorderBrush" Value="{StaticResource lightBrush2}" />
        <Setter Property="VerticalAlignment" Value="Top" />
    </Style>
    
    <!-- Panel buttons -->
    <Style x:Key="panelButtonStyle" TargetType="Button" BasedOn="{StaticResource buttonStyle}">
        <Setter Property="Background" Value="{StaticResource transBrush}"/>
        <Setter Property="Margin" Value="0,0,2,0" />
        <Setter Property="Width" Value="38" />
        <Setter Property="Height" Value="38" />
    </Style>

    <!-- Panel button images -->
    <Style x:Key="panelButtonImageStyle" TargetType="Image">
        <Setter Property="Width" Value="16" />
    </Style>

    <!-- Search bar border -->
    <Style x:Key="searchBarBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource lightBrush2}" />
        <Setter Property="Background" Value="{StaticResource whiteBrush}" />
    </Style>

    <!-- Search bar Focused border -->
    <Style x:Key="searchBarFocusBorderStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource searchBarBorderStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=textBox, Path=IsKeyboardFocused}" Value="True" >
                <Setter Property="BorderBrush" Value="{StaticResource darkBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Search bar Inner border -->
    <Style x:Key="searchBarInnerBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="2,0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Visibility" Value="Collapsed" />
    </Style>

    <!-- Search bar Textblock -->
    <Style x:Key="searchBarTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0,5" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Foreground" Value="{StaticResource darkGrayBrush}" />
    </Style>

    <!-- Search bar Host Textblock -->
    <Style x:Key="searchBarHostTextblockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource searchBarTextBlockStyle}">
        <Setter Property="Foreground" Value="{StaticResource blackBrush}" />
    </Style>

    <!-- Panel search bar Textbox -->
    <Style x:Key="searchBarStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxRevealStyle}">
        <Setter Property="Height" Value="30" />
        <Setter Property="Margin" Value="-2,0" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{StaticResource transBrush}" />
        <Setter Property="Padding" Value="0,5" />
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="{StaticResource transBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Search bar icon Button -->
    <Style x:Key="SearchBarIconBorderStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource buttonStyle}">
        <Setter Property="Background" Value="{StaticResource transBrush}"/>
        <Setter Property="Margin" Value="6,2,2,2" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="IsEnabled" Value="False" />
    </Style>

    <!-- Search bar icon image -->
    <Style x:Key="SearchBarIconStyle" TargetType="{x:Type Image}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Width" Value="14" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>
    
    <!-- Search bar icon label -->
    <Style x:Key="SearchBarIconLabelStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource searchBarTextBlockStyle}">
        <Setter Property="Margin" Value="5,0" />
        <Setter Property="Foreground" Value="{StaticResource redBrush}" />
        <Setter Property="Visibility" Value="Collapsed" />
    </Style>
    
    
    
    
    <!-- Status bar -->
    <Style x:Key="statusBarStyle" TargetType="{x:Type StatusBar}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Opacity" Value="100" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=statusBar, Path=Text}" Value="" >
                <Setter Property="Opacity" Value="0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Status bar item -->
    <Style x:Key="statusBarItemStyle" TargetType="{x:Type StatusBarItem}">
        <Setter Property="Background" Value="{StaticResource lightBrush}" />
        <Setter Property="Padding" Value="5,3" />
    </Style>

    <!-- TextIcon buttons -->
    <Style x:Key="TextIconButtonStyle" TargetType="Button" BasedOn="{StaticResource buttonStyle}">
        <Setter Property="Background" Value="{StaticResource transBrush}"/>
        <Setter Property="Padding" Value="12,0"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Height" Value="32"/>
    </Style>

    <!-- TextIcon Button image -->
    <Style x:Key="ButtonImageStyle" TargetType="Image">
        <Setter Property="Width" Value="16" />
    </Style>

    <!-- TextIcon Button Textblock -->
    <Style x:Key="ButtonTextBlockStyle" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="15,0,0,0" />
    </Style>

    <!-- TextIcon Button Tip -->
    <Style x:Key="ButtonTipStyle" TargetType="TextBlock" BasedOn="{StaticResource ButtonTextBlockStyle}">
        <Setter Property="DockPanel.Dock" Value="Right" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Foreground" Value="{StaticResource darkBrush}" />
    </Style>
    
    <!-- Menu Popup -->
    <Style x:Key="menuPopupStyle" TargetType="{x:Type Popup}">
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Visibility" Value="Visible" />
    </Style>
    
    <!-- Menu -->
    <Style x:Key="menuStyle" TargetType="{x:Type UserControl}">
        <Setter Property="Background" Value="{StaticResource lightBrush}" />
        <Setter Property="Width" Value="281" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>

    <!-- Menu borders -->
    <Style x:Key="menuBorderStyle" TargetType="Border">
        <Setter Property="BorderThickness" Value="1,0,0,1" />
        <Setter Property="BorderBrush" Value="{StaticResource lightBrush2}" />
        <Setter Property="Padding" Value="0,10" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>

    <!-- Menu Separator -->
    <Style x:Key="menuSeparatorStyle" TargetType="Border">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="12,10" />
        <Setter Property="Width" Value="280" />
        <Setter Property="Height" Value="1" />
        <Setter Property="Background" Value="{StaticResource lightBrush2}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
    </Style>

    <!-- Menu Zoom Buttons -->
    <Style x:Key="menuZoomButtonsStyle" TargetType="Button" BasedOn="{StaticResource buttonStyle}">
        <Setter Property="Background" Value="{StaticResource transBrush}"/>
        <Setter Property="IsEnabled" Value="False" />
        <Setter Property="Width" Value="32" />
        <Setter Property="Height" Value="32" />
    </Style>

    <!-- Menu Zoom Reset Button -->
    <Style x:Key="menuZoomResetButtonStyle" TargetType="Button" BasedOn="{StaticResource menuZoomButtonsStyle}">
        <Setter Property="MinWidth" Value="50" />
    </Style>

    <!-- Menu Zoom Images style -->
    <Style x:Key="menuZoomImagesStyle" TargetType="Image">
        <Setter Property="Width" Value="12" />
        <Setter Property="Height" Value="12" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>



    <!-- Confirm box buttons -->
    <Style x:Key="confirmBoxButtonStyle" TargetType="Button" BasedOn="{StaticResource buttonStyle}">
        <Setter Property="FontSize" Value="14" />
    </Style>


    <!-- Context Menu -->
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
        <Setter Property="HasDropShadow" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border"
                            Background="{StaticResource lightBrush}"
                            BorderBrush="{StaticResource lightBrush2}"
                            BorderThickness="1"
                            Padding="2,8">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Context Menu Separator -->
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Background" Value="{StaticResource lightBrush2}"/>
        <Setter Property="Margin" Value="10,5"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}" 
                        Height="1" 
                        SnapsToDevicePixels="true" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Context Menu Item -->
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}"/>
        <Setter Property="Padding" Value="10,0"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border"
                        Background="{TemplateBinding Background}"
                        Padding="{TemplateBinding Padding}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Height="28" Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                            </Grid.ColumnDefinitions>

                            <!-- Content for the menu text etc -->
                            <TextBlock x:Name="HeaderHost"
                                Grid.Column="0"
                                FontSize="14"
                                Margin="0,-1,0,0"
                                Text="{TemplateBinding Header}"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left" />

                            <!-- Content for the menu IGT -->
                            <TextBlock x:Name="IGTHost"
                                Grid.Column="1"
                                Foreground="DarkGray"
                                FontSize="12"
                                Margin="5,0,0,0"
                                Text="{TemplateBinding InputGestureText}"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Right" />

                            <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <Border x:Name="SubMenuBorder" BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" BorderThickness="1" Padding="2,2,2,2">
                                    <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                        <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>

                    <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                    <ControlTemplate.Triggers>
                        <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                        </Trigger>

                        <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>

                        <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" Value="{StaticResource lightBrush2}" TargetName="Border"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="LightGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

















</ResourceDictionary>